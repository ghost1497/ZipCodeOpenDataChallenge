{"version":3,"sources":["../../../src/@ionic-native/plugins/toast/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface ToastOptions {\n  /**\n   * Message to display\n   */\n  message?: string;\n  /**\n   * Duration in ms to show\n   */\n  duration?: number;\n  /**\n   * Position\n   */\n  position?: string;\n  /**\n   * Add negative value to move it up a bit\n   */\n  addPixelsY?: number;\n  /**\n   * Pass JSON object to be sent back in success callback\n   */\n  data?: any;\n  /**\n   * Styling\n   */\n  styling?: {\n    opacity?: number;\n    backgroundColor?: string;\n    textColor?: string;\n    cornerRadius?: number;\n    horizontalPadding?: number;\n    verticalPadding?: number;\n  };\n}\n\n/**\n * @name Toast\n * @description\n * This plugin allows you to show a native Toast (a little text popup) on iOS, Android and WP8. It's great for showing a non intrusive native notification which is guaranteed always in the viewport of the browser.\n *\n * Requires Cordova plugin: `cordova-plugin-x-toast`. For more info, please see the [Toast plugin docs](https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin).\n *\n * @usage\n * ```typescript\n * import { Toast } from '@ionic-native/toast';\n *\n * constructor(private toast: Toast) { }\n *\n * ...\n *\n * this.toast.show(`I'm a toast`, '5000', 'center').subscribe(\n *   toast => {\n *     console.log(toast);\n *   }\n * );\n * ```\n * @interfaces\n * ToastOptions\n */\n@Plugin({\n  pluginName: 'Toast',\n  plugin: 'cordova-plugin-x-toast',\n  pluginRef: 'plugins.toast',\n  repo: 'https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin',\n  platforms: ['Android', 'BlackBerry 10', 'iOS', 'Windows', 'Windows Phone 8']\n})\n\nexport class Toast extends IonicNativePlugin {\n\n  /**\n   * Show a native toast for the given duration at the specified position.\n   *\n   * @param {string} message  The message to display.\n   * @param {string} duration  Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.\n   * @param {string} position  Where to position the toast, either 'top', 'center', or 'bottom'.\n   * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'hide'\n  })\n  show(message: string, duration: string, position: string): Observable<any> { return; }\n\n  /**\n   * Manually hide any currently visible toast.\n   * @returns {Promise<any>} Returns a Promise that resolves on success.\n   */\n  @Cordova()\n  hide(): Promise<any> { return; }\n\n  /**\n   * Show a native toast with the given options.\n   *\n   * @param {Object} options  Options for showing a toast. Available options:\n   *   message  The message to display.\n   *   duration  Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.\n   *   position  Where to position the toast, either 'top', 'center', or 'bottom'.\n   *   addPixelsY  Offset in pixels to move the toast up or down from its specified position.\n   *\n   * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'hide'\n  })\n  showWithOptions(options: ToastOptions): Observable<any> { return; }\n\n  /**\n   * Shorthand for `show(message, 'short', 'top')`.\n   * @param message {string}\n   * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'hide'\n  })\n  showShortTop(message: string): Observable<any> { return; }\n\n  /**\n   * Shorthand for `show(message, 'short', 'center')`.\n   * @param message {string}\n   * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'hide'\n  })\n  showShortCenter(message: string): Observable<any> { return; }\n\n\n  /**\n   * Shorthand for `show(message, 'short', 'bottom')`.\n   * @param message {string}\n   * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'hide'\n  })\n  showShortBottom(message: string): Observable<any> { return; }\n\n\n  /**\n   * Shorthand for `show(message, 'long', 'top')`.\n   * @param message {string}\n   * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'hide'\n  })\n  showLongTop(message: string): Observable<any> { return; }\n\n\n  /**\n   * Shorthand for `show(message, 'long', 'center')`.\n   * @param message {string}\n   * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'hide'\n  })\n  showLongCenter(message: string): Observable<any> { return; }\n\n\n  /**\n   * Shorthand for `show(message, 'long', 'bottom')`.\n   * @param message {string}\n   * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'hide'\n  })\n  showLongBottom(message: string): Observable<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}